# This is a basic workflow to help you get started with Actions

name: CI
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  detekt:
    name: Check Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          ref: ${{ github.head_ref }}
      - name: DeteKt
        uses: alaegin/Detekt-Action@v1.19
        with:
          github_token: ${{ secrets.github_token }}
          detekt_config: config/detekt/detekt.yml
  tests:
    # The type of runner that the job will run on
    name: Tests
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      # Execute unit tests
      - name: Unit Test with Android Emulator Runner
        uses: ReactiveCircus/android-emulator-runner@v2
        with:
          api-level: 29
          script: ./gradlew connectedCheck

      - name: Generate Report
        uses: actions/upload-artifact@v2
        with:
          name: report
          path: app/build/reports/coverage/androidTest/debug

      - name: Download Test Reports Folder
        uses: actions/download-artifact@v2
        with:
          name: report
          path: app/build/reports/coverage/androidTest/debug

      - name: Upload Test Report
        run: bash <(curl -s https://codecov.io/bash) -f "app/build/reports/coverage/androidTest/debug/report.xml"

#  apksize:
#    name: App Size
#    runs-on: ubuntu-latest
#    steps:
#      - uses: microsoft/android-app-size-diff@v1.0.5
#        name: Android App size difference
#        with:
#          baseAppPath: test/assets/test.apk
#          baseAppLabel: Base app
#          targetAppPath: test/assets/test.apk
#          targetAppLabel: Target app
#          summaryOutputPath: summary.md
#          metrics: test, installSize, arscFile, nativeLibs, dexFiles
#          thresholds: 10, 10, 10, 10, 10